#!/usr/bin/env python3

import rospy
import actionlib

import sys
sys.path.insert(0, '/home/sergio/ur_ws/src/ur_pkg/src/functions')
from ur5_params import *
from ur_kinematics_functions import *

from sensor_msgs.msg import JointState
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint

if __name__ == '__main__':

    rospy.init_node("ur5_control_ikine", anonymous=True, disable_signals=True)

    #robot_client = actionlib.SimpleActionClient('/ur5_robot/scaled_pos_joint_traj_controller/follow_joint_trajectory', FollowJointTrajectoryAction)
    robot_client = actionlib.SimpleActionClient('/ur5_robot/pos_joint_traj_controller/follow_joint_trajectory', FollowJointTrajectoryAction)
    print("Waiting for server...")
    robot_client.wait_for_server()
    print("Connected to server")

    joint_names = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']

    # Crear goal
    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    g.trajectory.joint_names = joint_names

    # Configuracion articular inicial
    q = np.radians(np.array([-90.0, -90.0, 90.0, -90.0, -90.0, 0.0]))
    Q0 = q.tolist()
    # Enviar goal
    g.trajectory.points = [ JointTrajectoryPoint(positions=Q0,time_from_start=rospy.Duration(1.0))]
    robot_client.send_goal(g)
    robot_client.wait_for_result()
    rospy.sleep(1)

    #Configuracion articular inicial 1
    Q1 = np.radians(np.array([-80.0, -70.0, 80.0, -40.0, -60.0, 0.0]))
    t1 = 1.5
    # Enviar goal
    g.trajectory.points = [JointTrajectoryPoint(positions=Q1,time_from_start=rospy.Duration(t1))]
    robot_client.send_goal(g)
    robot_client.wait_for_result()

